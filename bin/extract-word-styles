#!/usr/bin/env -S uv run python3
"""Extract and display style definitions from Word documents."""

import sys
import os
from pathlib import Path
from docx import Document
from docx.shared import Pt

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


def format_color(color):
    """Format color object for display."""
    if color is None:
        return "None"
    if hasattr(color, 'rgb') and color.rgb:
        return f"RGB({color.rgb})"
    return str(color)


def format_length(length):
    """Format length measurement for display."""
    if length is None:
        return "None"
    return f"{length.pt:.1f}pt"


def extract_styles(docx_path):
    """Extract all style definitions from a Word document."""
    try:
        doc = Document(docx_path)
        styles = doc.styles
        
        print(f"Style definitions from: {docx_path}")
        print("=" * 60)
        
        for style in styles:
            print(f"\nStyle: {style.name}")
            print(f"  Type: {style.type}")
            print(f"  Built-in: {style.builtin}")
            
            if hasattr(style, 'font'):
                font = style.font
                print(f"  Font:")
                print(f"    Name: {font.name}")
                print(f"    Size: {format_length(font.size)}")
                print(f"    Bold: {font.bold}")
                print(f"    Italic: {font.italic}")
                print(f"    Underline: {font.underline}")
                print(f"    Color: {format_color(font.color)}")
            
            if hasattr(style, 'paragraph_format'):
                pf = style.paragraph_format
                print(f"  Paragraph:")
                print(f"    Alignment: {pf.alignment}")
                print(f"    Left indent: {format_length(pf.left_indent)}")
                print(f"    Right indent: {format_length(pf.right_indent)}")
                print(f"    First line indent: {format_length(pf.first_line_indent)}")
                print(f"    Space before: {format_length(pf.space_before)}")
                print(f"    Space after: {format_length(pf.space_after)}")
                print(f"    Line spacing: {pf.line_spacing}")
        
        print(f"\nTotal styles found: {len(styles)}")
        
    except Exception as e:
        print(f"Error reading {docx_path}: {e}", file=sys.stderr)
        return 1
    
    return 0


def main():
    """Main entry point."""
    if len(sys.argv) != 2:
        print("Usage: extract-word-styles <word_document.docx>", file=sys.stderr)
        return 1
    
    docx_path = sys.argv[1]
    
    if not os.path.exists(docx_path):
        print(f"Error: File '{docx_path}' not found", file=sys.stderr)
        return 1
    
    if not docx_path.lower().endswith('.docx'):
        print(f"Error: File must be a .docx document", file=sys.stderr)
        return 1
    
    return extract_styles(docx_path)


if __name__ == "__main__":
    sys.exit(main())